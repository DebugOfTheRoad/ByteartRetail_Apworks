<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="System.ServiceModel.dll"#>
<#@ assembly name="System.Runtime.Serialization.dll"#>
<#@ Assembly Name="$(SolutionDir)ByteartRetail.Infrastructure\bin\$(ConfigurationName)\ByteartRetail.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)ByteartRetail.Application\bin\$(ConfigurationName)\ByteartRetail.Application.dll" #>
<#@ Assembly Name="$(SolutionDir)ByteartRetail.Domain\bin\$(ConfigurationName)\ByteartRetail.Domain.dll" #>
<#@ Assembly Name="$(SolutionDir)ByteartRetail.ServiceContracts\bin\$(ConfigurationName)\ByteartRetail.ServiceContracts.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ByteartRetail.Application" #>
<#@ import namespace="System.ServiceModel"#>
<#@ include file="Common.tt"#>
// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.ServiceModel;
using Apworks;
using ByteartRetail.DataObjects;
using ByteartRetail.ServiceContracts;

namespace ByteartRetail.Services.WCF
{
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]
	public class OrderService : IOrderService
	{
		private readonly IOrderService _orderServiceImpl = ServiceLocator.Instance.GetService<IOrderService>();
		<#foreach (MethodInfo method in typeof(ByteartRetail.ServiceContracts.IOrderService).GetMethods()) {#>
		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _orderServiceImpl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		public void Dispose() { _orderServiceImpl.Dispose(); }
	}
}