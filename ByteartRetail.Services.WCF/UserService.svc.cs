 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.ServiceModel;
using Apworks;
using ByteartRetail.DataObjects;
using ByteartRetail.ServiceContracts;

namespace ByteartRetail.Services.WCF
{
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]
	public class UserService : IUserService
	{
		private readonly IUserService _userServiceImpl = ServiceLocator.Instance.GetService<IUserService>();
				public UserDataObjectList CreateUsers(UserDataObjectList userDataObjects)
		{
			try
			{
				return _userServiceImpl.CreateUsers(userDataObjects);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public Boolean ValidateUser(String userName, String password)
		{
			try
			{
				return _userServiceImpl.ValidateUser(userName, password);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public Boolean DisableUser(UserDataObject userDataObject)
		{
			try
			{
				return _userServiceImpl.DisableUser(userDataObject);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public Boolean EnableUser(UserDataObject userDataObject)
		{
			try
			{
				return _userServiceImpl.EnableUser(userDataObject);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public UserDataObjectList UpdateUsers(UserDataObjectList userDataObjects)
		{
			try
			{
				return _userServiceImpl.UpdateUsers(userDataObjects);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void DeleteUsers(UserDataObjectList userDataObjects)
		{
			try
			{
				 _userServiceImpl.DeleteUsers(userDataObjects);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public UserDataObject GetUserByKey(Guid id, QuerySpec spec)
		{
			try
			{
				return _userServiceImpl.GetUserByKey(id, spec);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public UserDataObject GetUserByEmail(String email, QuerySpec spec)
		{
			try
			{
				return _userServiceImpl.GetUserByEmail(email, spec);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public UserDataObject GetUserByName(String userName, QuerySpec spec)
		{
			try
			{
				return _userServiceImpl.GetUserByName(userName, spec);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public UserDataObjectList GetUsers(QuerySpec spec)
		{
			try
			{
				return _userServiceImpl.GetUsers(spec);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public RoleDataObjectList GetRoles()
		{
			try
			{
				return _userServiceImpl.GetRoles();
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public RoleDataObject GetRoleByKey(Guid id)
		{
			try
			{
				return _userServiceImpl.GetRoleByKey(id);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public RoleDataObjectList CreateRoles(RoleDataObjectList roleDataObjects)
		{
			try
			{
				return _userServiceImpl.CreateRoles(roleDataObjects);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public RoleDataObjectList UpdateRoles(RoleDataObjectList roleDataObjects)
		{
			try
			{
				return _userServiceImpl.UpdateRoles(roleDataObjects);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void DeleteRoles(IDList roleIDs)
		{
			try
			{
				 _userServiceImpl.DeleteRoles(roleIDs);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void AssignRole(Guid userID, Guid roleID)
		{
			try
			{
				 _userServiceImpl.AssignRole(userID, roleID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void UnassignRole(Guid userID)
		{
			try
			{
				 _userServiceImpl.UnassignRole(userID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public RoleDataObject GetUserRoleByUserName(String userName)
		{
			try
			{
				return _userServiceImpl.GetUserRoleByUserName(userName);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public SalesOrderDataObjectList GetSalesOrders(String userName)
		{
			try
			{
				return _userServiceImpl.GetSalesOrders(userName);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void Dispose() { _userServiceImpl.Dispose(); }
	}
}


