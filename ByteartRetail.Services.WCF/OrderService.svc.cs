 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.ServiceModel;
using Apworks;
using ByteartRetail.DataObjects;
using ByteartRetail.ServiceContracts;

namespace ByteartRetail.Services.WCF
{
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]
	public class OrderService : IOrderService
	{
		private readonly IOrderService _orderServiceImpl = ServiceLocator.Instance.GetService<IOrderService>();
				public Int32 GetShoppingCartItemCount(Guid userID)
		{
			try
			{
				return _orderServiceImpl.GetShoppingCartItemCount(userID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void AddProductToCart(Guid customerID, Guid productID, Int32 quantity)
		{
			try
			{
				 _orderServiceImpl.AddProductToCart(customerID, productID, quantity);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public ShoppingCartDataObject GetShoppingCart(Guid customerID)
		{
			try
			{
				return _orderServiceImpl.GetShoppingCart(customerID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void UpdateShoppingCartItem(Guid shoppingCartItemID, Int32 quantity)
		{
			try
			{
				 _orderServiceImpl.UpdateShoppingCartItem(shoppingCartItemID, quantity);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void DeleteShoppingCartItem(Guid shoppingCartItemID)
		{
			try
			{
				 _orderServiceImpl.DeleteShoppingCartItem(shoppingCartItemID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public SalesOrderDataObject Checkout(Guid customerID)
		{
			try
			{
				return _orderServiceImpl.Checkout(customerID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void Confirm(Guid orderID)
		{
			try
			{
				 _orderServiceImpl.Confirm(orderID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void Dispatch(Guid orderID)
		{
			try
			{
				 _orderServiceImpl.Dispatch(orderID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public SalesOrderDataObjectList GetSalesOrdersForUser(Guid userID)
		{
			try
			{
				return _orderServiceImpl.GetSalesOrdersForUser(userID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public SalesOrderDataObjectList GetAllSalesOrders()
		{
			try
			{
				return _orderServiceImpl.GetAllSalesOrders();
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public SalesOrderDataObject GetSalesOrder(Guid orderID)
		{
			try
			{
				return _orderServiceImpl.GetSalesOrder(orderID);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void Dispose() { _orderServiceImpl.Dispose(); }
	}
}